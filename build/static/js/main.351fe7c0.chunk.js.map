{"version":3,"sources":["components/Action.js","components/Header.js","components/AddOptions.js","components/Option.js","components/Options.js","components/OptionModal.js","components/IndecisionApp.js","serviceWorker.js","index.js"],"names":["Action","props","className","onClick","handlePick","disabled","hasOptions","Header","title","subtitle","defaultProps","AddOptions","state","error","undefined","handleAddOption","e","preventDefault","option","target","elements","value","setState","this","onSubmit","type","name","React","Component","Option","index","handleDeleteOption","Options","handleDeleteOptions","options","length","map","key","OptionModal","isOpen","selectedOption","contentLabel","handleCloseOptionModel","IndecisionApp","optionToRemove","prevState","filter","randomNum","Math","floor","random","indexOf","concat","JSON","parse","localStorage","getItem","console","log","prevProps","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.351fe7c0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Action = props => {\r\n  return (\r\n    <div>\r\n      <button\r\n        className=\"big-button\"\r\n        onClick={props.handlePick}\r\n        disabled={!props.hasOptions}\r\n      >\r\n        What should I do?\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Action;\r\n","import React from \"react\";\r\n\r\nconst Header = props => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"container\">\r\n        <h1 className=\"header__title\">{props.title || \"Indecision App\"}</h1>\r\n        {props.subtitle && <p className=\"header__subtitle\">{props.subtitle}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  title: \"Indecision App\"\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default class AddOptions extends React.Component {\r\n  state = {\r\n    error: undefined\r\n  };\r\n  handleAddOption = e => {\r\n    e.preventDefault();\r\n    const option = e.target.elements.option.value;\r\n    const error = this.props.handleAddOption(option);\r\n    this.setState(() => ({ error }));\r\n    if (!error) e.target.elements.option.value = \"\";\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.error && (\r\n          <p className=\"add-option-error\">{this.state.error}</p>\r\n        )}\r\n        <form className=\"add-option\" onSubmit={this.handleAddOption}>\r\n          <input className=\"add-option__input\" type=\"text\" name=\"option\" />\r\n          <button className=\"button\">Add Option</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nconst Option = props => {\r\n  return (\r\n    <div className=\"option\">\r\n      <p className=\"option__text\">\r\n        {props.index}. {props.option}\r\n      </p>\r\n      <button\r\n        className=\"button button--link\"\r\n        onClick={e => props.handleDeleteOption(props.option)}\r\n      >\r\n        Remove\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Option;\r\n","import React from \"react\";\r\nimport Option from \"./Option\";\r\nconst Options = props => {\r\n  return (\r\n    <div>\r\n      <div className=\"widget-header\">\r\n        <h3 className=\"widget-header__title\">Your Options</h3>\r\n        <button\r\n          className=\"button button--link\"\r\n          onClick={props.handleDeleteOptions}\r\n        >\r\n          Remove All\r\n        </button>\r\n      </div>\r\n      {props.options.length == 0 && (\r\n        <p className=\"widget__message\">Add options to get started</p>\r\n      )}\r\n      {props.options.map((option, index) => (\r\n        <Option\r\n          key={option}\r\n          option={option}\r\n          index={index + 1}\r\n          handleDeleteOption={props.handleDeleteOption}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nconst OptionModal = props => {\r\n  return (\r\n    <Modal isOpen={!!props.selectedOption} contentLabel=\"Selected Option\">\r\n      <h3>Selected Option</h3>\r\n      {props.selectedOption && <p>{props.selectedOption}</p>}\r\n      <button onClick={props.handleCloseOptionModel}>Okay</button>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default OptionModal;\r\n","import React from \"react\";\r\nimport Action from \"./Action\";\r\nimport Header from \"./Header\";\r\nimport AddOptions from \"./AddOptions\";\r\nimport Options from \"./Options\";\r\nimport OptionModal from \"./OptionModal\";\r\n\r\nexport default class IndecisionApp extends React.Component {\r\n  state = {\r\n    options: [],\r\n    selectedOption: undefined\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      const options = JSON.parse(localStorage.getItem(\"options\"));\r\n      if (options) {\r\n        this.setState(() => ({ options }));\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Error in parsing Json\");\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.options.length !== this.state.options.length) {\r\n      localStorage.setItem(\"options\", JSON.stringify(this.state.options));\r\n    }\r\n  }\r\n\r\n  handleDeleteOptions = () => {\r\n    this.setState(() => ({ options: [] }));\r\n  };\r\n\r\n  handleDeleteOption = optionToRemove => {\r\n    this.setState(prevState => ({\r\n      options: prevState.options.filter(option => option !== optionToRemove)\r\n    }));\r\n  };\r\n\r\n  handlePick = () => {\r\n    const randomNum = Math.floor(Math.random() * this.state.options.length);\r\n    this.setState(() => ({ selectedOption: this.state.options[randomNum] }));\r\n  };\r\n\r\n  handleAddOption = option => {\r\n    if (!option) return \"Enter a value\";\r\n    else if (this.state.options.indexOf(option) > -1)\r\n      return \"Value already exist\";\r\n\r\n    this.setState(prevState => ({ options: prevState.options.concat(option) }));\r\n  };\r\n\r\n  handleCloseOptionModel = () => {\r\n    this.setState(() => ({ selectedOption: undefined }));\r\n  };\r\n\r\n  render() {\r\n    var title = \"Indecision App\";\r\n    var subtitle = \"Put your life into hands of computer\";\r\n    return (\r\n      <div>\r\n        <Header subtitle={subtitle} />\r\n        <div className=\"container\">\r\n          <Action\r\n            handlePick={this.handlePick}\r\n            hasOptions={this.state.options.length > 0}\r\n          />\r\n          <div className=\"widget\">\r\n            <Options\r\n              options={this.state.options}\r\n              handleDeleteOptions={this.handleDeleteOptions}\r\n              handleDeleteOption={this.handleDeleteOption}\r\n            />\r\n            <AddOptions handleAddOption={this.handleAddOption} />\r\n          </div>\r\n        </div>\r\n        <OptionModal\r\n          selectedOption={this.state.selectedOption}\r\n          handleCloseOptionModel={this.handleCloseOptionModel}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport IndecisionApp from \"./components/IndecisionApp\";\nimport \"./styles/styles.scss\";\nimport \"normalize.css/normalize.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<IndecisionApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}